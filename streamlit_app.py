
import io
import os
import re
import json
import time
import html
import unicodedata
from pathlib import Path
from typing import Dict, List, Tuple

import pandas as pd
import streamlit as st

st.set_page_config(page_title="üîí Szabadul√≥szoba ‚Äì Excel vez√©rl√©ssel", layout="centered")

st.title("üîí Szabadul√≥szoba ‚Äì Excel vez√©rl√©ssel")
st.caption("Szob√°k = Excel munkalapok ‚Ä¢ K√©rd√©s‚Äìv√°lasz Excelb≈ël ‚Ä¢ Hib√°s v√°lasz ‚Üí z√°rol√°s (√©l≈ë visszasz√°ml√°l√°ssal)")

STATE_FILE = Path("escape_state.json")  # perzisztens √°llapot (helyi mappa)
LOCAL_TEMPLATE = Path("escape_rooms_template.xlsx")  # automatikus forr√°s, ha l√©tezik

# ---------- Seg√©df√ºggv√©nyek ----------
def load_state() -> Dict:
    if STATE_FILE.exists():
        try:
            return json.loads(STATE_FILE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_state(state: Dict) -> None:
    STATE_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")

def now_ts() -> float:
    return time.time()

def normalize(s: str) -> str:
    """Kisbet≈±, sz√≥k√∂z trim, √©kezetek elt√°vol√≠t√°sa."""
    if s is None:
        return ""
    s = str(s).strip().lower()
    s = "".join(c for c in unicodedata.normalize("NFD", s) if unicodedata.category(c) != "Mn")
    s = " ".join(s.split())
    return s

def answer_matches(user: str, key: str) -> bool:
    """Egyez√©s: 're:...' regex, vagy 'a|b|c' alternat√≠v√°k, k√ºl√∂nben pontos egyez√©s normaliz√°lva."""
    if key is None:
        return False
    key = str(key).strip()
    if key.startswith("re:"):
        pattern = key[3:].strip()
        try:
            return re.fullmatch(pattern, user or "", flags=re.IGNORECASE) is not None
        except re.error:
            pass
    if "|" in key:
        alts = [k.strip() for k in key.split("|")]
        return normalize(user) in {normalize(k) for k in alts}
    return normalize(user) == normalize(key)

@st.cache_data(show_spinner=False)
def read_workbook(xls_bytes: bytes) -> Tuple[List[str], Dict[str, pd.DataFrame]]:
    xls = pd.ExcelFile(io.BytesIO(xls_bytes))
    sheets = xls.sheet_names
    data = {}
    for s in sheets:
        df = pd.read_excel(io.BytesIO(xls_bytes), sheet_name=s)
        # v√°rjuk: K√©rd√©s, Megold√°s (opcion√°lis: Lez√°r√°sPerc, Hint)
        cols = {str(c).strip().lower(): c for c in df.columns}
        def pick(*names):
            for n in names:
                if n.lower() in cols:
                    return cols[n.lower()]
            return None
        qcol = pick("K√©rd√©s", "Kerdes", "Question", "Feladat")
        acol = pick("Megold√°s", "Megoldas", "Answer", "V√°lasz", "Valasz")
        lcol = pick("Lez√°r√°sPerc", "LezarasPerc", "LockMinutes")
        hcol = pick("Hint", "Seg√≠ts√©g", "Segitseg")

        if qcol is None or acol is None:
            continue

        df = df.rename(columns={qcol:"K√©rd√©s", acol:"Megold√°s"})
        if lcol: df = df.rename(columns={lcol:"Lez√°r√°sPerc"})
        if hcol: df = df.rename(columns={hcol:"Hint"})

        # tiszt√≠t√°s + z√°rol√°si percek (float is lehet, pl. 0,5 vagy "0,5")
        df["K√©rd√©s"] = df["K√©rd√©s"].astype(str).str.strip()
        df["Megold√°s"] = df["Megold√°s"].astype(str).str.strip()

        if "Lez√°r√°sPerc" in df.columns:
            def to_minutes(v):
                if pd.isna(v): return 0.0
                if isinstance(v, str):
                    v = v.replace(",", ".").strip()
                try:
                    return max(0.0, float(v))
                except Exception:
                    return 0.0
            df["Lez√°r√°sPerc"] = df["Lez√°r√°sPerc"].apply(to_minutes)
        else:
            df["Lez√°r√°sPerc"] = 0.0

        if "Hint" not in df.columns:
            df["Hint"] = ""

        df = df.dropna(subset=["K√©rd√©s","Megold√°s"]).reset_index(drop=True)
        if not df.empty:
            data[s] = df[["K√©rd√©s","Megold√°s","Lez√°r√°sPerc","Hint"]]
    return sheets, data

def get_progress(state: Dict, team_id: str, room: str) -> Dict:
    key = f"{team_id}::{room}"
    return state.get(key, {"idx": 0, "lock_until": 0.0, "lock_total": 0.0})

def set_progress(state: Dict, team_id: str, room: str, idx: int = None, lock_until: float = None, lock_total: float = None) -> None:
    key = f"{team_id}::{room}"
    entry = state.get(key, {"idx": 0, "lock_until": 0.0, "lock_total": 0.0})
    if idx is not None:
        entry["idx"] = idx
    if lock_until is not None:
        entry["lock_until"] = float(lock_until)
    if lock_total is not None:
        entry["lock_total"] = float(lock_total)
    state[key] = entry

def format_mmss(seconds: int) -> str:
    m, s = divmod(max(0, int(seconds)), 60)
    return f"{m:02d}:{s:02d}"

# ---------- Oldals√°v ----------
with st.sidebar:
    st.header("üèÅ Csapat / Forr√°s")
    team_id = st.text_input("Csapat azonos√≠t√≥", value="csapat1", help="Minden csapatnak adj egyedi ID-t.")

    uploaded = st.file_uploader("Excel (.xlsx) felt√∂lt√©se", type=["xlsx"])
    if uploaded is not None:
        xls_bytes = uploaded.read()
        st.caption("Forr√°s: felt√∂lt√∂tt Excel.")
    else:
        # Automatikus alap√©rtelmez√©s: helyi f√°jl, ha l√©tezik
        if LOCAL_TEMPLATE.exists():
            xls_bytes = LOCAL_TEMPLATE.read_bytes()
            st.caption(f"Forr√°s: helyi f√°jl ‚Äì {LOCAL_TEMPLATE.name}")
        else:
            xls_bytes = None
            st.info("T√∂lts fel egy Excel f√°jlt, vagy helyezd el a mapp√°ban: 'escape_rooms_template.xlsx'.")

    st.divider()
    st.caption("Oszlopok: **K√©rd√©s**, **Megold√°s**, (opcion√°lis) **Lez√°r√°sPerc** (percben, pl. 0,5), **Hint**.")

if not xls_bytes:
    st.stop()

sheets, data = read_workbook(xls_bytes)
rooms = [s for s in sheets if s in data]
if not rooms:
    st.error("Nem tal√°ltam √©rv√©nyes munkalapot (hi√°nyzik a 'K√©rd√©s' √©s 'Megold√°s' oszlop).")
    st.stop()

# ---------- Szobav√°laszt√≥ gombok ----------
st.subheader("Szob√°k")
chosen = st.session_state.get("room")
cols = st.columns(4)
for i, r in enumerate(rooms):
    if cols[i % 4].button(r):
        st.session_state["room"] = r
        chosen = r

if not chosen:
    chosen = rooms[0]
    st.session_state["room"] = chosen

st.success(f"Kiv√°lasztva: **{chosen}**")

# ---------- J√°t√©k logika ----------
state = load_state()
progress = get_progress(state, team_id, chosen)
idx = int(progress.get("idx", 0))
lock_until = float(progress.get("lock_until", 0.0))
lock_total = float(progress.get("lock_total", 0.0))  # m√°sodpercben elt√°rolva (a pontos visszasz√°ml√°l√°shoz)
now = now_ts()
locked = now < lock_until
remaining = int(lock_until - now)

df = data[chosen]
total = len(df)

st.write(f"Feladat: **{idx+1} / {total}**")

if idx >= total:
    st.success("üéâ K√©szen vagytok ezzel a szob√°val!")
    st.stop()

row = df.iloc[idx]
question = row["K√©rd√©s"]
answer_key = row["Megold√°s"]
row_lock_min = float(row.get("Lez√°r√°sPerc", 0.0))  # perc (float is lehet, pl. 0.5)
row_lock_secs = int(round(row_lock_min * 60.0))

# --------- KIJELZ≈ê: K√©rd√©s (fekete, nagyobb bet≈±) ---------
st.markdown(
    f"""
<div style="font-size:22px; color:#000; font-weight:600; line-height:1.45; border:1px solid #e5e7eb; padding:12px 14px; border-radius:10px; background:#fff;">
  {html.escape(question)}
</div>
""",
    unsafe_allow_html=True
)

# --------- HA Z√ÅROLVA VAN: √©l≈ë visszasz√°ml√°l√≥ ---------
if locked:
    st.error("‚õî Hib√°s v√°lasz. Z√°rolva, am√≠g a visszasz√°ml√°l√≥ 0-ra √©r.")
    # ha kor√°bban elt√°roltuk a teljes z√°rol√°si id≈ët, azt haszn√°ljuk; k√ºl√∂nben es√ºnk vissza a sor szerinti percekre (vagy 180s)
    total_secs = int(lock_total) if lock_total > 0 else (row_lock_secs if row_lock_secs > 0 else 180)
    total_secs = max(total_secs, 1)

    pb = st.progress(0.0)
    timer_ph = st.empty()

    # Friss√≠tj√ºk m√°sodpercenk√©nt
    target = lock_until
    while True:
        now2 = now_ts()
        rem = int(target - now2)
        if rem <= 0:
            pb.progress(1.0)
            timer_ph.markdown("**00:00**")
            # felold√°s √©s √∫jrarenderel√©s
            try:
                st.rerun()
            except Exception:
                st.experimental_rerun()
            st.stop()
        # sz√°zal√©k a teljes id≈ëh√∂z viszony√≠tva
        pct = max(0.0, min(1.0, 1 - rem / total_secs))
        pb.progress(pct)
        timer_ph.markdown(f"**{rem//60:02d}:{rem%60:02d}**")
        time.sleep(1)

# --------- V√°lasz ≈±rlap ---------
with st.form(key="answer_form", clear_on_submit=False):
    user_answer = st.text_input("V√°lasz", help="Sz√∂veg, sz√°m, t√∂bb megold√°s is lehet (pl. 'piros|k√©k'). Regex: 're:...'")
    submit = st.form_submit_button("Ellen≈ërz√©s")

if submit:
    ok = answer_matches(user_answer, answer_key)
    if ok:
        set_progress(state, team_id, chosen, idx=idx+1, lock_until=0.0, lock_total=0.0)
        save_state(state)
        st.success("‚úÖ Helyes! K√∂vetkez≈ë feladat...")
        try:
            st.rerun()
        except Exception:
            st.experimental_rerun()
    else:
        # z√°rol√°s: a sor 'Lez√°r√°sPerc' √©rt√©ke (perc ‚Üí m√°sodperc). Ha nincs/0, legyen 3 perc.
        minutes = row_lock_min if row_lock_min and row_lock_min > 0 else 3.0
        total_secs = int(round(minutes * 60.0))
        until = now + total_secs
        set_progress(state, team_id, chosen, lock_until=until, lock_total=total_secs)
        save_state(state)
        st.error(f"‚õî Hib√°s! A pr√≥b√°lkoz√°s **{minutes} percig** z√°rolva van.")
        try:
            st.rerun()
        except Exception:
            st.experimental_rerun()
