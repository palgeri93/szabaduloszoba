
import io
import os
import re
import json
import time
import unicodedata
from pathlib import Path
from typing import Dict, List, Tuple

import pandas as pd
import streamlit as st

st.set_page_config(page_title="üîí Szabadul√≥szoba ‚Äì Excel vez√©rl√©ssel (lok√°lis)", layout="centered")

st.title("üîí Szabadul√≥szoba ‚Äì Excel vez√©rl√©ssel (lok√°lis)")
st.caption("Szob√°k = Excel munkalapok ‚Ä¢ K√©rd√©sek & megold√°sok Excelb≈ël ‚Ä¢ Hib√°s v√°lasz ‚Üí z√°rol√°s")

STATE_FILE = Path("escape_state.json")  # perzisztens √°llapot (helyi mappa)

# ---------- Seg√©df√ºggv√©nyek ----------
def load_state() -> Dict:
    if STATE_FILE.exists():
        try:
            return json.loads(STATE_FILE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_state(state: Dict) -> None:
    STATE_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")

def now_ts() -> float:
    return time.time()

def normalize(s: str) -> str:
    """Kisbet≈±, sz√≥k√∂z trim, √©kezetek elt√°vol√≠t√°sa."""
    if s is None:
        return ""
    s = str(s).strip().lower()
    s = "".join(c for c in unicodedata.normalize("NFD", s) if unicodedata.category(c) != "Mn")
    s = " ".join(s.split())
    return s

def answer_matches(user: str, key: str) -> bool:
    """Egyez√©s: 're:...' regex, vagy 'a|b|c' alternat√≠v√°k, k√ºl√∂nben pontos egyez√©s normaliz√°lva."""
    if key is None:
        return False
    key = str(key).strip()
    if key.startswith("re:"):
        pattern = key[3:].strip()
        try:
            return re.fullmatch(pattern, user or "", flags=re.IGNORECASE) is not None
        except re.error:
            pass
    if "|" in key:
        alts = [k.strip() for k in key.split("|")]
        return normalize(user) in {normalize(k) for k in alts}
    return normalize(user) == normalize(key)

@st.cache_data(show_spinner=False)
def read_workbook(xls_bytes: bytes) -> Tuple[List[str], Dict[str, pd.DataFrame]]:
    xls = pd.ExcelFile(io.BytesIO(xls_bytes))
    sheets = xls.sheet_names
    data = {}
    for s in sheets:
        df = pd.read_excel(io.BytesIO(xls_bytes), sheet_name=s)
        # v√°rjuk: K√©rd√©s, Megold√°s (opcion√°lis: Lez√°r√°sPerc, Hint)
        cols = {str(c).lower(): c for c in df.columns}
        def pick(*names):
            for n in names:
                if n.lower() in cols:
                    return cols[n.lower()]
            return None
        qcol = pick("K√©rd√©s", "Kerdes", "Question", "Feladat")
        acol = pick("Megold√°s", "Megoldas", "Answer", "V√°lasz", "Valasz")
        lcol = pick("Lez√°r√°sPerc", "LezarasPerc", "LockMinutes")
        hcol = pick("Hint", "Seg√≠ts√©g", "Segitseg")

        if qcol is None or acol is None:
            continue

        df = df.rename(columns={qcol:"K√©rd√©s", acol:"Megold√°s"})
        if lcol: df = df.rename(columns={lcol:"Lez√°r√°sPerc"})
        if hcol: df = df.rename(columns={hcol:"Hint"})
        df["K√©rd√©s"] = df["K√©rd√©s"].astype(str).str.strip()
        df["Megold√°s"] = df["Megold√°s"].astype(str).str.strip()
        if "Lez√°r√°sPerc" in df.columns:
            df["Lez√°r√°sPerc"] = pd.to_numeric(df["Lez√°r√°sPerc"], errors="coerce").fillna(0).clip(lower=0).astype(int)
        else:
            df["Lez√°r√°sPerc"] = 0
        if "Hint" not in df.columns:
            df["Hint"] = ""
        df = df.dropna(subset=["K√©rd√©s","Megold√°s"]).reset_index(drop=True)
        if not df.empty:
            data[s] = df[["K√©rd√©s","Megold√°s","Lez√°r√°sPerc","Hint"]]
    return sheets, data

def get_progress(state: Dict, team_id: str, room: str) -> Dict:
    key = f"{team_id}::{room}"
    return state.get(key, {"idx": 0, "lock_until": 0.0})

def set_progress(state: Dict, team_id: str, room: str, idx: int = None, lock_until: float = None) -> None:
    key = f"{team_id}::{room}"
    entry = state.get(key, {"idx": 0, "lock_until": 0.0})
    if idx is not None:
        entry["idx"] = idx
    if lock_until is not None:
        entry["lock_until"] = float(lock_until)
    state[key] = entry

def format_mmss(seconds: int) -> str:
    m, s = divmod(max(0, int(seconds)), 60)
    return f"{m:02d}:{s:02d}"

# ---------- Oldals√°v ----------
with st.sidebar:
    st.header("üèÅ Csapat / Bemenet")
    team_id = st.text_input("Csapat azonos√≠t√≥", value="csapat1", help="Minden csapatnak adj egyedi ID-t.")
    uploaded = st.file_uploader("Excel (.xlsx) felt√∂lt√©se", type=["xlsx"])
    st.caption("Szob√°k = munkalapok ‚Ä¢ Oszlopok: **K√©rd√©s**, **Megold√°s**, (opcion√°lis) **Lez√°r√°sPerc**, **Hint**.")
    st.download_button(
        "üì• Minta Excel let√∂lt√©se",
        data=st.session_state.get("_template_bytes", b""),
        file_name="escape_rooms_template.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        help="Kezd≈ë sablon k√©t szob√°val"
    )
    st.divider()

    st.header("üßë‚Äçüíº J√°t√©kmester m√≥d")
    pw_env = os.environ.get("ESCAPE_ADMIN_PW", "admin")
    admin_try = st.text_input("Jelsz√≥ (alap√©rtelmezett: admin)", type="password")
    admin = admin_try == pw_env
    if admin:
        st.success("J√°t√©kmester m√≥d akt√≠v.")
        if st.button("‚ôªÔ∏è Minden halad√°s/z√°rol√°s t√∂rl√©se enn√©l a csapatn√°l"):
            state = load_state()
            state = {k:v for k,v in state.items() if not k.startswith(f"{team_id}::")}
            save_state(state)
            st.info("T√∂r√∂lve.")
        reset_room = st.text_input("Szoba t√∂rl√©se (munkalap neve)")
        if st.button("üßº T√∂r√∂ld ezt a szob√°t a csapatn√°l"):
            if reset_room:
                state = load_state()
                key = f"{team_id}::{reset_room}"
                if key in state:
                    state.pop(key)
                    save_state(state)
                    st.info(f"T√∂r√∂lve: {key}")
                else:
                    st.warning("Nem volt ilyen bejegyz√©s.")
    else:
        st.info("Add meg az admin jelsz√≥t a halad√°s t√∂rl√©s√©hez. (√Åll√≠tsd be ENV: ESCAPE_ADMIN_PW)")

# Minta Excel a mem√≥ri√°ban (let√∂lt√©shez)
if "_template_bytes" not in st.session_state:
    df1 = pd.DataFrame({
        "K√©rd√©s": [
            "√çrd be az els≈ë titkos sz√≥t (tipp: rejtjel a falon)",
            "Mi a kulcssz√≥? (t√∂bb j√≥: piros vagy k√©k)",
            "Sz√°mold ki: 7*6"
        ],
        "Megold√°s": [
            "re:alpha\\d{2}",     # regex p√©lda
            "piros|k√©k",          # alternat√≠v√°k
            "42"                  # pontos egyez√©s
        ],
        "Lez√°r√°sPerc": [1, 2, 1],
        "Hint": ["bet≈±k + 2 sz√°mjegy", "sz√≠nek", "egyszer≈± szorz√°s"]
    })
    df2 = pd.DataFrame({
        "K√©rd√©s": ["M√°sik szoba els≈ë k√©rd√©se"],
        "Megold√°s": ["titok"],
        "Lez√°r√°sPerc": [2],
        "Hint": ["n√©zz k√∂r√ºl a polcon"]
    })
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        df1.to_excel(writer, sheet_name="Szoba A", index=False)
        df2.to_excel(writer, sheet_name="Szoba B", index=False)
    buf.seek(0)
    st.session_state["_template_bytes"] = buf.read()

if not uploaded:
    st.info("T√∂lts fel egy Excel f√°jlt a bal oldali s√°vban, vagy t√∂ltsd le a mint√°t √©s t√∂ltsd vissza.")
    st.stop()

xls_bytes = uploaded.read()
sheets, data = read_workbook(xls_bytes)
rooms = [s for s in sheets if s in data]
if not rooms:
    st.error("Nem tal√°ltam √©rv√©nyes munkalapot (hi√°nyzik a 'K√©rd√©s' √©s 'Megold√°s' oszlop).")
    st.stop()

# ---------- Szobav√°laszt√≥ gombok ----------
st.subheader("Szob√°k")
chosen = st.session_state.get("room")
cols = st.columns(4)
for i, r in enumerate(rooms):
    if cols[i % 4].button(r):
        st.session_state["room"] = r
        chosen = r

if not chosen:
    chosen = rooms[0]
    st.session_state["room"] = chosen

st.success(f"Kiv√°lasztva: **{chosen}**")

# ---------- J√°t√©k logika ----------
state = load_state()
progress = get_progress(state, team_id, chosen)
idx = int(progress.get("idx", 0))
lock_until = float(progress.get("lock_until", 0.0))
now = now_ts()
locked = now < lock_until
remaining = int(lock_until - now)

df = data[chosen]
total = len(df)

st.write(f"Feladat: **{idx+1} / {total}**")

if idx >= total:
    st.success("üéâ K√©szen vagytok ezzel a szob√°val!")
    st.stop()

row = df.iloc[idx]
question = row["K√©rd√©s"]
answer_key = row["Megold√°s"]
row_lock = int(row.get("Lez√°r√°sPerc", 0))
hint = row.get("Hint", "")

if locked:
    st.error(f"‚õî Hib√°s v√°lasz. Z√°rolva m√©g **{(remaining//60):02d}:{(remaining%60):02d}** ideig.")
    total_secs = max(1, (row_lock if row_lock else 0) * 60)
    if total_secs > 0:
        st.progress(max(0.0, min(1.0, 1 - remaining / total_secs)))
    if st.button("üîÅ Friss√≠t√©s"):
        try:
            st.rerun()
        except Exception:
            st.experimental_rerun()
    st.stop()

st.info(question)
if hint:
    with st.expander("üí° Seg√≠ts√©g"):
        st.write(hint)

with st.form(key="answer_form", clear_on_submit=False):
    user_answer = st.text_input("V√°lasz", help="Sz√∂veg, sz√°m, t√∂bb megold√°s is lehet (pl. 'piros|k√©k'). Regex: 're:...'")
    submit = st.form_submit_button("Ellen≈ërz√©s")

if submit:
    ok = answer_matches(user_answer, answer_key)
    if ok:
        set_progress(state, team_id, chosen, idx=idx+1)  # k√∂vetkez≈ë k√©rd√©s
        save_state(state)
        st.success("‚úÖ Helyes! K√∂vetkez≈ë feladat...")
        try:
            st.rerun()
        except Exception:
            st.experimental_rerun()
    else:
        minutes = row_lock if row_lock and row_lock > 0 else 3
        lock_until = now + minutes * 60
        set_progress(state, team_id, chosen, lock_until=lock_until)
        save_state(state)
        st.error(f"‚õî Hib√°s! A pr√≥b√°lkoz√°s **{minutes} percig** z√°rolva van.")
        try:
            st.rerun()
        except Exception:
            st.experimental_rerun()
